Report on Course Registration System Code :
1. Overview
This Course Registration System code implements a simple application in C for managing courses,
student registrations, and enrollments. It is designed to facilitate students' enrollment in available
courses, view their schedules, and provide administrative functionality such as resetting course seat
availability and viewing student records.
2. Features and Functionality
The system provides the following key features:
View Courses: Displays a list of available courses with details such as course name, course ID, number
of available seats, course date, time, and classroom.
Register Student: Allows a new student to register by providing their name, automatically assigning a
student ID, and initializing their enrolled courses.
Enroll in Course: Enables a student to enroll in a course by selecting the student ID and course ID. It
checks whether the student has reached the maximum number of enrolled courses and whether
there are available seats in the course.
View Student Schedule: Displays a student's enrolled courses along with the course schedule (date,
time, and classroom).
Admin Tasks: Provides an admin interface to view all registered students, reset course seat
availability, and return to the main menu. This helps manage course availability and student
registrations.
3. Data Structures
Two main data structures are used:
Course: A struct to represent a course. It includes:
courseName: Name of the course.
courseID: Unique ID for each course.
seats: Number of available seats in the course.
date: Date when the course takes place.
time: Time when the course takes place.
classroom: The classroom number where the course is held.
Student: A struct to represent a student. It includes:
studentName: Name of the student.
studentID: Unique ID for each student.
enrolledCourses: An array holding the IDs of the courses the student is enrolled in.
numCourses: Tracks the number of courses the student is currently enrolled in.
4. Functions in the Code
viewCourses(): Displays a list of all available courses with details (ID, name, seats, date, time, and
classroom).
registerStudent(): Registers a new student by accepting their name and assigning them an ID. The
student’s course list is initialized as empty.
enrollInCourse(): Allows a student to enroll in a course by providing their student ID and course ID.
The function checks for available seats and whether the student has reached the maximum number
of courses they can enroll in.
viewStudentSchedule(): Displays the schedule of a student by showing all the courses they are
enrolled in, including the course details (name, date, time, and classroom).
adminTasks(): Provides options for administrative tasks, such as viewing all students and resetting
course seats to the initial value.
mainMenu(): The main menu function that provides a user interface to navigate between different
options such as viewing courses, registering a student, enrolling in courses, and performing
administrative tasks.
5. Flow of the System
1. The system starts by presenting a main menu with various options.
2. The user can choose to:
View the available courses.
Register a student.
Enroll a student in a course.
View a student’s course schedule.
Perform administrative tasks (e.g., resetting course seats).
3. For administrative tasks, the system allows viewing of all students and resetting of available seats
in each course.
4. The process continues until the user selects the option to exit.
6. Error Handling
The code includes error handling for common issues such as:
Invalid student or course IDs (e.g., entering an ID that does not exist).
Enrolling a student in a course with no available seats.
Enrolling a student in more than the allowed number of courses.
Invalid input for numeric values (e.g., course ID, student ID).
Each function uses appropriate checks and prompts the user for re-input in case of errors, ensuring a
smooth user experience.
7. Improvements and Future Enhancements
While the system is functional, there are several potential improvements and future enhancements
that can be made:
Persistent Data Storage: Currently, the data is stored in memory and is lost when the program exits.
Implementing file handling (e.g., saving student and course data to files) would allow data
persistence across multiple runs of the program.
User Interface Enhancements: A graphical user interface (GUI) could improve the user experience by
making it more intuitive for users to navigate through different options.
Additional Validation: More checks could be added to prevent enrolling a student in a course if they
have already enrolled in the same course.
Dynamic Capacity: Rather than having a fixed number of seats (3), course seat availability could be
dynamically managed, perhaps depending on the course's popularity or other factors.
Advanced Scheduling: Implementing conflict checking between enrolled courses (ensuring students
aren’t enrolled in overlapping classes) would add another layer of sophistication to the system.
8. Conclusion
This Course Registration System is a well-structured application designed for managing courses,
students, and enrollments. It offers basic functionality such as viewing courses, registering students,
enrolling them in courses, and viewing their schedules. With some enhancements, the system could
be expanded to handle more complex scenarios and provide better user experience.
